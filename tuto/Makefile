#------------------------------------------------------------------------------#
# This makefile was generated by 'cbp2make' tool rev.147                       #
#------------------------------------------------------------------------------#


WORKDIR = `pwd`

CC = gcc
CXX = g++
AR = ar
LD = g++
WINDRES = windres



INC =
CFLAGS = -Wall -fexceptions -std=c++11
RESINC =
LIBDIR =
LIB =
LDFLAGS =


LLVMDIR = ../llvm-build
LLVM_CFLAGS = -I $(LLVMDIR)/include
LLVM_LDFLAGS = -L $(LLVMDIR)/lib
LLVM_CFLAGS = $(filter-out -fno-rtti, $(shell $(LLVMDIR)/bin/llvm-config --cxxflags))
LLVM_LDFLAGS = $(shell $(LLVMDIR)/bin/llvm-config --ldflags --system-libs --libs core)


INC_DEBUG = $(INC)
CFLAGS_DEBUG = $(CFLAGS) -Wall -g
RESINC_DEBUG = $(RESINC)
RCFLAGS_DEBUG = $(RCFLAGS)
LIBDIR_DEBUG = $(LIBDIR)
LIB_DEBUG = $(LIB)
LDFLAGS_DEBUG = $(LDFLAGS)
LLVM_CFLAGS_DEBUG = $(LLVM_CFLAGS)
LLVM_LDFLAGS_DEBUG = $(LLVM_LDFLAGS)
OBJDIR_DEBUG = obj/Debug
DEP_DEBUG =
OUTDIR_DEBUG = bin/Debug
OUT_DEBUG = $(OUTDIR_DEBUG)/tuto

INC_RELEASE = $(INC)
CFLAGS_RELEASE = $(CFLAGS) -O2 -Wall
RESINC_RELEASE = $(RESINC)
RCFLAGS_RELEASE = $(RCFLAGS)
LIBDIR_RELEASE = $(LIBDIR)
LIB_RELEASE = $(LIB)
LDFLAGS_RELEASE = $(LDFLAGS) -s
LLVM_CFLAGS_RELEASE = $(LLVM_CFLAGS)
LLVM_LDFLAGS_RELEASE = $(LLVM_LDFLAGS)
OBJDIR_RELEASE = obj/Release
DEP_RELEASE =
OUTDIR_RELEASE = bin/Release
OUT_RELEASE = $(OUTDIR_RELEASE)/tuto

SRC_DIR = src
INCLUDE_DIR = include

SRC = main.cpp $(wildcard $(SRC_DIR)/*.cpp)

OBJ_DEBUG = $(addprefix $(OBJDIR_DEBUG)/, $(addsuffix .o, $(basename $(SRC))))
OBJ_RELEASE = $(addprefix $(OBJDIR_RELEASE)/, $(addsuffix .o, $(basename $(SRC))))

all: debug release

clean: clean_debug clean_release

before_debug:
	test -d $(OUTDIR_DEBUG) || mkdir -p $(OUTDIR_DEBUG)
	test -d $(OBJDIR_DEBUG) || mkdir -p $(OBJDIR_DEBUG)
	test -d $(OBJDIR_DEBUG)/src || mkdir -p $(OBJDIR_DEBUG)/src
	@echo pouet
	@echo $(LLVM_FLAGS)
	@echo pouet

after_debug:

Debug: debug
debug: before_debug out_debug after_debug

out_debug: before_debug $(OBJ_DEBUG) $(DEP_DEBUG)
	$(LD) $(LIBDIR_DEBUG) -o $(OUT_DEBUG) $(OBJ_DEBUG)  $(LDFLAGS_DEBUG) $(LIB_DEBUG) $(LLVM_LDFLAGS_DEBUG)


$(OBJDIR_DEBUG)/%.o : %.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $< -o $@ $(LLVM_CFLAGS_DEBUG)

cleanDebug: clean_debug
clean_debug:
	rm -f $(OBJ_DEBUG) $(OUT_DEBUG)
	rm -rf $(OUTDIR_DEBUG)
	rm -rf $(OBJDIR_DEBUG)
	rm -rf $(OBJDIR_DEBUG)/src

beforeRelease: before_release
before_release:
	test -d $(OUTDIR_RELEASE) || mkdir -p $(OUTDIR_RELEASE)
	test -d $(OBJDIR_RELEASE) || mkdir -p $(OBJDIR_RELEASE)
	test -d $(OBJDIR_RELEASE)/src || mkdir -p $(OBJDIR_RELEASE)/src

after_release:

Release: release
release: before_release out_release after_release

out_release: before_release $(OBJ_RELEASE) $(DEP_RELEASE)
	$(LD) $(LIBDIR_RELEASE) -o $(OUT_RELEASE) $(OBJ_RELEASE)  $(LDFLAGS_RELEASE) $(LIB_RELEASE) $(LLVM_LDFLAGS_RELEASE)

$(OBJDIR_RELEASE)/%.o : %.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c $< -o $@ $(LLVM_CFLAGS_RELEASE)

clean_release:
	rm -f $(OBJ_RELEASE) $(OUT_RELEASE)
	rm -rf $(OUTDIR_RELEASE)
	rm -rf $(OBJDIR_RELEASE)
	rm -rf $(OBJDIR_RELEASE)/src

.PHONY: before_debug after_debug clean_debug before_release after_release clean_release

